<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="listas_8h" kind="file" language="C++">
    <compoundname>listas.h</compoundname>
    <includedby refid="logica_8h" local="yes">logica.h</includedby>
    <includedby refid="listas_8c" local="yes">listas.c</includedby>
    <includedby refid="logica_8c" local="yes">logica.c</includedby>
    <invincdepgraph>
      <node id="33">
        <label>logica.h</label>
        <link refid="logica_8h"/>
      </node>
      <node id="32">
        <label>listas.h</label>
        <link refid="listas_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structnodo" prot="public">nodo</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="listas_8h_1ab74c40cea97ab9b24f68471bb1ded1a2" prot="public" static="no">
        <type>struct <ref refid="structnodo" kindref="compound">nodo</ref></type>
        <definition>typedef struct nodo  NODO</definition>
        <argsstring></argsstring>
        <name>NODO</name>
        <briefdescription>
<para>Tipo de dados para as Listas. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="16" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="listas_8h_1a2ed03b19209dd10718380b31b09a69f5" prot="public" static="no">
        <type>struct <ref refid="structnodo" kindref="compound">nodo</ref> *</type>
        <definition>typedef struct nodo * LISTA</definition>
        <argsstring></argsstring>
        <name>LISTA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="16" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="listas_8h_1ae3b99323b6f8f35d80bb69ff1a27985e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA criar_lista</definition>
        <argsstring>()</argsstring>
        <name>criar_lista</name>
        <briefdescription>
<para>Cria uma lista vazia. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Uma lista. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="21" column="1" bodyfile="listas.c" bodystart="5" bodyend="7"/>
      </memberdef>
      <memberdef kind="function" id="listas_8h_1a5f74e07389068229446ef997f20679e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA insere_cabeca</definition>
        <argsstring>(LISTA L, void *v)</argsstring>
        <name>insere_cabeca</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Insere um valor na cabeça da lista. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Uma lista. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="26" column="1" bodyfile="listas.c" bodystart="9" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="listas_8h_1abfcb205f3eb670157be0d1221021714b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* devolve_cabeca</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>devolve_cabeca</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Devolve a cabeça da lista. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Uma lista. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="31" column="1" bodyfile="listas.c" bodystart="19" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="listas_8h_1ad9380152361127432c55c1c6067e05ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA proximo</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>proximo</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Devolve a cauda da lista. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Uma lista. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="36" column="1" bodyfile="listas.c" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="listas_8h_1a9026a681a68322b5ec7f07137b864cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA remove_cabeca</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>remove_cabeca</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Remove a cabeça da lista (libertando o espaço ocupado) e devolve a cauda. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Uma lista. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="41" column="1" bodyfile="listas.c" bodystart="27" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="listas_8h_1a4c10928f7acaa4e3de3760cea0dfd9c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lista_esta_vazia</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>lista_esta_vazia</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Devolve verdareiro se a lista é vazia. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Um inteiro. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="46" column="1" bodyfile="listas.c" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="listas_8h_1accd2178488f5e3121a7d5e23e9b85915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int comprimento_da_lista</definition>
        <argsstring>(LISTA l)</argsstring>
        <name>comprimento_da_lista</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Devolve o comprimento da lista. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Um inteiro. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="51" column="1" bodyfile="listas.c" bodystart="42" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Definição das listas ligadas. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#ifndef<sp/>PROJETO_LISTAS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PROJETO_LISTAS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="structnodo" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnodo" kindref="compound">nodo</ref><sp/>{</highlight></codeline>
<codeline lineno="13" refid="structnodo_1ab63adcdb83ea1fdcf4fa10f3cafc4a6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structnodo_1ab63adcdb83ea1fdcf4fa10f3cafc4a6a" kindref="member">valor</ref>;</highlight></codeline>
<codeline lineno="15" refid="structnodo_1a086547621a7da23b916bbe26e0855308" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnodo" kindref="compound">nodo</ref><sp/>*<ref refid="structnodo_1a086547621a7da23b916bbe26e0855308" kindref="member">prox</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}<sp/><ref refid="listas_8h_1ab74c40cea97ab9b24f68471bb1ded1a2" kindref="member">NODO</ref>,<sp/>*<ref refid="structnodo" kindref="compound">LISTA</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">LISTA<sp/><ref refid="listas_8h_1ae3b99323b6f8f35d80bb69ff1a27985e" kindref="member">criar_lista</ref>();</highlight></codeline>
<codeline lineno="26"><highlight class="normal">LISTA<sp/><ref refid="listas_8h_1a5f74e07389068229446ef997f20679e9" kindref="member">insere_cabeca</ref>(LISTA<sp/>L,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*v);</highlight></codeline>
<codeline lineno="31"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="listas_8h_1abfcb205f3eb670157be0d1221021714b" kindref="member">devolve_cabeca</ref>(LISTA<sp/>L);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">LISTA<sp/><ref refid="listas_8h_1ad9380152361127432c55c1c6067e05ae" kindref="member">proximo</ref>(LISTA<sp/>L);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">LISTA<sp/><ref refid="listas_8h_1a9026a681a68322b5ec7f07137b864cbd" kindref="member">remove_cabeca</ref>(LISTA<sp/>L);</highlight></codeline>
<codeline lineno="46"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="listas_8h_1a4c10928f7acaa4e3de3760cea0dfd9c0" kindref="member">lista_esta_vazia</ref>(LISTA<sp/>L);</highlight></codeline>
<codeline lineno="51"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="listas_8h_1accd2178488f5e3121a7d5e23e9b85915" kindref="member">comprimento_da_lista</ref>(LISTA<sp/>l);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PROJETO_LISTAS_H</highlight></codeline>
    </programlisting>
    <location file="listas.h"/>
  </compounddef>
</doxygen>
